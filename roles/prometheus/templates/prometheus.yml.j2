---
global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.
  evaluation_interval: 15s # By default, scrape targets every 15 seconds.
  # scrape_timeout is set to the global default (10s).
  external_labels:
    cluster: '{{ cluster_name }}'
{% for item in prometheus_extra_labels %}
    {{ item.label }}: "{{ item.value }}"
{% endfor %}

# Load and evaluate rules in this file every 'evaluation_interval' seconds.
rule_files:
  - 'node.rules.yml'
  - 'blacker.rules.yml'
  - 'bypass.rules.yml'

{% set alertmanager_host = hostvars[groups.alertmanager_servers[0]].ansible_host | default(hostvars[groups.alertmanager_servers[0]].inventory_hostname)
    if groups.get('alertmanager_servers', []) else '' -%}
{% set alertmanager_port = hostvars[groups.alertmanager_servers[0]].alertmanager_port if alertmanager_host else '' -%}

{% if alertmanager_target|default("") %}
alerting:
 alertmanagers:
 - static_configs:
   - targets:
     - '{{ alertmanager_target }}'
{% elif alertmanager_host %}
alerting:
 alertmanagers:
 - static_configs:
   - targets:
     - '{{ alertmanager_host }}:{{ alertmanager_port }}'
{% else %}
# alerting:
#  alertmanagers:
#  - static_configs:
#    - targets:
#      - 'alertmanager_host:9093'
{% endif %}

{% set pushgateway_host = hostvars[groups.monitoring_servers[0]].ansible_host | default(hostvars[groups.monitoring_servers[0]].inventory_hostname)
    if groups.get('monitoring_servers', []) else '' -%}
{% set pushgateway_port = hostvars[groups.monitoring_servers[0]].pushgateway_port if pushgateway_host else '' -%}

{% set grafana_host = hostvars[groups.grafana_servers[0]].ansible_host | default(hostvars[groups.grafana_servers[0]].inventory_hostname)
    if groups.get('grafana_servers', []) else '' -%}
{% set grafana_port = hostvars[groups.grafana_servers[0]].grafana_port if grafana_host else '' -%}

{% set blackbox_host = hostvars[groups.monitored_servers[0]].ansible_host | default(hostvars[groups.monitored_servers[0]].inventory_hostname) if groups.get('monitored_servers', []) else '' -%}
{% set blackbox_port = hostvars[groups.monitored_servers[0]].blackbox_exporter_port if blackbox_host else '' -%}

{% set node_exporter_addrs = [] -%}
{% set blackbox_exporter_addrs = [] -%}
{% set target_hosts = [] -%}
{% for host in groups.monitored_servers -%}
  {% set host_ip = hostvars[host].ansible_host | default(hostvars[host].inventory_hostname) -%}
  {% set node_exporter_port = hostvars[host].node_exporter_port -%}
  {% set blackbox_exporter_port = hostvars[host].blackbox_exporter_port -%}
  {% set _ = node_exporter_addrs.append("%s:%s" % (host_ip, node_exporter_port)) -%}
  {% set _ = blackbox_exporter_addrs.append("%s:%s" % (host_ip, blackbox_exporter_port)) -%}
  {% set _ = target_hosts.append(host_ip) -%}
{% endfor -%}

scrape_configs:
{% if pushgateway_host %}
  - job_name: 'overwritten-cluster'
    scrape_interval: 15s
    honor_labels: true # don't overwrite job & instance labels
    static_configs:
      - targets: ['{{ pushgateway_host }}:{{ pushgateway_port }}']

  - job_name: "blackbox_exporter_http"
    scrape_interval: 30s
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
    - targets:
      - 'http://{{ pushgateway_host }}:{{ pushgateway_port }}/metrics'
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ blackbox_host }}:{{ blackbox_port }}
{% endif %}

  - job_name: "overwritten-nodes"
    honor_labels: true # don't overwrite job & instance labels
    static_configs:
    - targets:
{% for node_exporter_addr in node_exporter_addrs %}
      - '{{ node_exporter_addr }}'
{% endfor %}

{% for blackbox_exporter_addr in blackbox_exporter_addrs %}
{% set blackbox_exporter_ip = blackbox_exporter_addr.split(':')[0] %}
  - job_name: "blackbox_exporter_{{ blackbox_exporter_ip }}_icmp"
    scrape_interval: 6s
    metrics_path: /probe
    params:
      module: [icmp]
    static_configs:
    - targets:
{% for target_host in target_hosts %}
      - '{{ target_host }}'
{% endfor %}
    relabel_configs:
      - source_labels: [__address__]
        regex: (.*)(:80)?
        target_label: __param_target
        replacement: ${1}
      - source_labels: [__param_target]
        regex: (.*)
        target_label: ping
        replacement: ${1}
      - source_labels: []
        regex: .*
        target_label: __address__
        replacement: {{ blackbox_exporter_addr }}

{% endfor %}
